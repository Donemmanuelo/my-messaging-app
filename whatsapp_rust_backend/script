#!/bin/bash

# --- Start of Script ---

echo "ðŸš€ Upgrading project to Phase 10: Message Persistence & History..."

# --- Backend Modifications (Rust) ---

echo "-> Modifying Rust backend..."

# Navigate to the Rust project directory
if [ -d "whatsapp_rust_backend" ]; then
    cd whatsapp_rust_backend
elif [ ! -f "Cargo.toml" ]; then
    cd ../whatsapp_rust_backend || { echo "Error: Could not find 
'whatsapp_rust_backend' directory."; exit 1; }
fi

# -- src/models/mod.rs (Modified) --
cat > src/models/mod.rs << 'EOF'
use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};
use sqlx::FromRow;
use uuid::Uuid;

#[derive(Serialize, FromRow, Debug)]
pub struct User { pub id: Uuid, pub phone_number: String, pub name: Option<String> 
}

#[derive(Serialize, FromRow, Debug)]
pub struct ConversationDetails {
    pub conversation_id: Uuid,
    pub is_group: bool,
    pub group_name: Option<String>,
    pub other_user_id: Option<Uuid>,
    pub other_user_name: Option<String>,
    pub last_message: Option<String>,
    pub last_message_at: Option<DateTime<Utc>>,
}

#[derive(Serialize, FromRow, Debug)]
#[sqlx(rename_all = "lowercase")]
pub struct ChatMessage {
    pub id: Uuid,
    pub conversation_id: Uuid,
    pub sender_id: Uuid,
    pub content: String,
    // We will handle message_type and status later
    pub created_at: DateTime<Utc>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Claims { pub sub: String, pub exp: usize }
#[derive(Deserialize)]
pub struct SendOtpRequest { pub phone_number: String }
#[derive(Deserialize)]
pub struct VerifyOtpRequest { pub phone_number: String, pub otp: String }
#[derive(Serialize)]
pub struct AuthResponse { pub token: String, pub user_id: String }
EOF

# -- src/actors/server.rs (Modified) --
cat > src/actors/server.rs << 'EOF'
use actix::{Actor, ActorFutureExt, AsyncContext, Context, ContextFutureSpawner, 
Handler, Message as ActixMessage, Recipient, WrapFuture};
use serde::Serialize;
use serde_json::json;
use sqlx::PgPool;
use std::collections::{HashMap, HashSet};
use uuid::Uuid;

#[derive(ActixMessage, Debug, Serialize)] #[rtype(result = "()")] pub struct 
ClientMessage { pub sender_id: Uuid, pub conversation_id: Uuid, pub content: 
String }
#[derive(ActixMessage, Debug)] #[rtype(result = "()")] pub struct Connect { pub 
user_id: Uuid, pub addr: Recipient<WsMessage> }
#[derive(ActixMessage, Debug)] #[rtype(result = "()")] pub struct Disconnect { pub 
user_id: Uuid }
#[derive(ActixMessage, Debug, Serialize)] #[rtype(result = "()")] pub struct 
Typing { pub sender_id: Uuid, pub conversation_id: Uuid, pub is_typing: bool }
#[derive(ActixMessage, Debug, Serialize)] #[rtype(result = "()")] pub struct 
WsMessage(pub String);

pub struct ChatServer { sessions: HashMap<Uuid, Recipient<WsMessage>>, 
conversations: HashMap<Uuid, HashSet<Uuid>>, db_pool: PgPool }
impl ChatServer {
    pub fn new(db_pool: PgPool) -> Self { Self { sessions: HashMap::new(), 
conversations: HashMap::new(), db_pool } }
    fn broadcast(&self, _conv_id: &Uuid, msg: &str, skip_id: Option<Uuid>) {
        for (user_id, session) in &self.sessions {
            if skip_id.map_or(true, |id| *user_id != id) {
                session.do_send(WsMessage(msg.to_owned()));
            }
        }
    }
}
impl Actor for ChatServer { type Context = Context<Self>; }

impl Handler<ClientMessage> for ChatServer {
    type Result = ();
    fn handle(&mut self, msg: ClientMessage, ctx: &mut Context<Self>) {
        log::info!("Received message: '{}' from user {}", msg.content, 
msg.sender_id);
        let db_pool = self.db_pool.clone();

        // Spawn a future to insert the message into the database
        let fut = async move {
            let insert_result = sqlx::query!(
                "INSERT INTO messages (conversation_id, sender_id, content) VALUES 
($1, $2, $3)",
                msg.conversation_id,
                msg.sender_id,
                msg.content
            )
            .execute(&db_pool)
            .await;

            match insert_result {
                Ok(_) => {
                    log::info!("Message saved to DB successfully.");
                    // Return the original message to broadcast it
                    Some(msg)
                }
                Err(e) => {
                    log::error!("Failed to save message to DB: {}", e);
                    // Return None if saving failed
                    None
                }
            }
        };

        // After the future completes, broadcast the message if it was saved
        fut.into_actor(self).then(|res, act, _| {
            if let Some(saved_msg) = res {
                let response = json!({"event": "new_message", "data": saved_msg});
                act.broadcast(&saved_msg.conversation_id, &response.to_string(), 
None);
            }
            fut::ready(())
        }).wait(ctx);
    }
}

// Other handlers remain the same...
impl Handler<Connect> for ChatServer {
    type Result = ();
    fn handle(&mut self, msg: Connect, ctx: &mut Context<Self>) {
        self.sessions.insert(msg.user_id, msg.addr);
        let db_pool = self.db_pool.clone();
        let fut = async move { sqlx::query!("UPDATE users SET online = TRUE WHERE 
id = $1", msg.user_id).execute(&db_pool).await };
        fut.into_actor(self).map(|_, _, _| {}).wait(ctx);
        let event = json!({"event": "user_online", "data": {"user_id": 
msg.user_id.to_string()}});
        self.broadcast(&Uuid::nil(), &event.to_string(), Some(msg.user_id));
    }
}
impl Handler<Disconnect> for ChatServer {
    type Result = ();
    fn handle(&mut self, msg: Disconnect, ctx: &mut Context<Self>) {
        self.sessions.remove(&msg.user_id);
        let db_pool = self.db_pool.clone();
        let fut = async move { sqlx::query!("UPDATE users SET online = FALSE, 
last_seen = NOW() WHERE id = $1", msg.user_id).execute(&db_pool).await };
        fut.into_actor(self).map(|_, _, _| {}).wait(ctx);
        let event = json!({"event": "user_offline", "data": {"user_id": 
msg.user_id.to_string()}});
        self.broadcast(&Uuid::nil(), &event.to_string(), None);
    }
}
impl Handler<Typing> for ChatServer {
    type Result = ();
    fn handle(&mut self, msg: Typing, _: &mut Context<Self>) {
        let response = json!({"event": "user_typing", "data": msg});
        self.broadcast(&msg.conversation_id, &response.to_string(), 
Some(msg.sender_id));
    }
}
EOF

# -- src/handlers/conversation_handler.rs (Modified) --
cat > src/handlers/conversation_handler.rs << 'EOF'
use crate::models::{Claims, ChatMessage, ConversationDetails};
use actix_web::{web, HttpMessage, HttpRequest, HttpResponse, Responder};
use sqlx::{types::Uuid, PgPool};

pub async fn get_conversations(pool: web::Data<PgPool>, req: HttpRequest) -> impl 
Responder {
    let user_id = 
Uuid::parse_str(&req.extensions().get::<Claims>().unwrap().sub).unwrap();
    let query_result = sqlx::query_as!(
        ConversationDetails,
        r#"
        WITH LastMessages AS (
            SELECT conversation_id, content, created_at, ROW_NUMBER() 
OVER(PARTITION BY conversation_id ORDER BY created_at DESC) as rn
            FROM messages
        )
        SELECT c.id as "conversation_id!", c.is_group, c.group_name, 
other_p.user_id as "other_user_id?", other_u.name as "other_user_name?", 
lm.content as "last_message?", lm.created_at as "last_message_at?"
        FROM conversation_participants cp
        JOIN conversations c ON cp.conversation_id = c.id
        LEFT JOIN conversation_participants other_p ON c.id = 
other_p.conversation_id AND other_p.user_id != $1
        LEFT JOIN users other_u ON other_p.user_id = other_u.id
        LEFT JOIN LastMessages lm ON c.id = lm.conversation_id AND lm.rn = 1
        WHERE cp.user_id = $1
        ORDER BY lm.created_at DESC NULLS LAST;
        "#,
        user_id
    ).fetch_all(pool.get_ref()).await;
    match query_result {
        Ok(convos) => HttpResponse::Ok().json(convos),
        Err(e) => { log::error!("Failed to fetch conversations: {}", e); 
HttpResponse::InternalServerError().finish() }
    }
}

// --- ADD NEW HANDLER FOR MESSAGE HISTORY ---
pub async fn get_message_history(pool: web::Data<PgPool>, path: web::Path<Uuid>) 
-> impl Responder {
    let conversation_id = path.into_inner();
    let query_result = sqlx::query_as!(
        ChatMessage,
        "SELECT id, conversation_id, sender_id, content, created_at FROM messages 
WHERE conversation_id = $1 ORDER BY created_at ASC",
        conversation_id
    )
    .fetch_all(pool.get_ref())
    .await;

    match query_result {
        Ok(messages) => HttpResponse::Ok().json(messages),
        Err(e) => {
            log::error!("Failed to fetch message history: {}", e);
            HttpResponse::InternalServerError().finish()
        }
    }
}

pub fn config(cfg: &mut web::ServiceConfig) {
    
cfg.service(web::resource("/conversations").route(web::get().to(get_conversations)))
       
.service(web::resource("/conversations/{id}/messages").route(web::get().to(get_message_history)));
}
EOF

# --- Frontend Modifications (Flutter) ---

echo "-> Modifying Flutter client..."
# Navigate back to the workspace root, then into the flutter project
cd .. 
cd whatsapp_flutter_client || { echo "Error: Could not find 
'whatsapp_flutter_client' directory."; exit 1; }

# -- lib/data/repositories/conversation_repository.dart (Modified) --
cat > lib/data/repositories/conversation_repository.dart << 'EOF'
import 'package:dio/dio.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:whatsapp_flutter_client/data/models/conversation.dart';
import 'package:whatsapp_flutter_client/data/models/chat_message.dart';

class ConversationRepository {
  final _dio = Dio(BaseOptions(baseUrl: 'http://127.0.0.1:3000/api'));
  final _storage = const FlutterSecureStorage();

  ConversationRepository() {
    _dio.interceptors.add(InterceptorsWrapper(onRequest: (options, handler) async 
{
      options.headers['Authorization'] = 'Bearer ${await _storage.read(key: 
'jwt_token')}';
      handler.next(options);
    }));
  }

  Future<List<Conversation>> getConversations() async {
    final response = await _dio.get('/conversations');
    return (response.data as List).map((json) => 
Conversation.fromJson(json)).toList();
  }

  // --- ADD NEW METHOD FOR MESSAGE HISTORY ---
  Future<List<ChatMessage>> getMessageHistory(String conversationId) async {
    try {
      final response = await _dio.get('/conversations/$conversationId/messages');
      final data = response.data as List;
      return data.map((json) => ChatMessage.fromJson(json)).toList();
    } catch (e) {
      throw Exception('Failed to fetch message history');
    }
  }
}
EOF

# -- lib/presentation/bloc/chat_bloc/chat_event.dart (Modified) --
cat > lib/presentation/bloc/chat_bloc/chat_event.dart << 'EOF'
import 'package:equatable/equatable.dart';

abstract class ChatEvent extends Equatable { const ChatEvent(); @override 
List<Object> get props => []; }

class ConnectWebSocket extends ChatEvent {}
class SendMessage extends ChatEvent { final String content, conversationId; const 
SendMessage({required this.content, required this.conversationId}); @override 
List<Object> get props => [content, conversationId]; }
class SendTypingIndicator extends ChatEvent { final bool isTyping; final String 
conversationId; const SendTypingIndicator({required this.isTyping, required 
this.conversationId}); @override List<Object> get props => [isTyping, 
conversationId]; }

// --- ADD NEW EVENT FOR MESSAGE HISTORY ---
class FetchMessageHistory extends ChatEvent {
  final String conversationId;
  const FetchMessageHistory(this.conversationId);
  @override List<Object> get props => [conversationId];
}
EOF

# -- lib/presentation/bloc/chat_bloc/chat_bloc.dart (Modified) --
cat > lib/presentation/bloc/chat_bloc/chat_bloc.dart << 'EOF'
import 'dart:async';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:whatsapp_flutter_client/data/datasources/websocket_service.dart';
import 'package:whatsapp_flutter_client/data/models/chat_message.dart';
import 
'package:whatsapp_flutter_client/data/repositories/conversation_repository.dart';
import 
'package:whatsapp_flutter_client/presentation/bloc/chat_bloc/chat_event.dart';
import 
'package:whatsapp_flutter_client/presentation/bloc/chat_bloc/chat_state.dart';

class _MessageReceived extends ChatEvent { final dynamic message; const 
_MessageReceived(this.message); }

class ChatBloc extends Bloc<ChatEvent, ChatState> {
  final WebSocketService _wsService;
  final ConversationRepository _convoRepo; // <-- Add repository
  StreamSubscription? _subscription;
  
  ChatBloc({required WebSocketService webSocketService, required 
ConversationRepository conversationRepository}) 
      : _wsService = webSocketService, _convoRepo = conversationRepository, 
super(const ChatState()) {
    on<ConnectWebSocket>(_onConnect);
    on<SendMessage>(_onSendMessage);
    on<SendTypingIndicator>(_onSendTyping);
    on<_MessageReceived>(_onMessageReceived);
    on<FetchMessageHistory>(_onFetchHistory); // <-- Register new handler
  }

  void _onConnect(/*...*/) { /* ... existing code ... */ }
  void _onSendMessage(/*...*/) { /* ... existing code ... */ }
  void _onSendTyping(/*...*/) { /* ... existing code ... */ }
  void _onMessageReceived(/*...*/) { /* ... existing code ... */ }

  // --- ADD NEW HANDLER FOR MESSAGE HISTORY ---
  Future<void> _onFetchHistory(FetchMessageHistory event, Emitter<ChatState> emit) 
async {
    emit(state.copyWith(status: ChatStatus.loadingHistory));
    try {
      final history = await _convoRepo.getMessageHistory(event.conversationId);
      emit(state.copyWith(status: ChatStatus.success, messages: history));
    } catch (e) {
      emit(state.copyWith(status: ChatStatus.failure, error: e.toString()));
    }
  }

  @override Future<void> close() { /* ... existing code ... */ return 
super.close(); }
}

// Helper re-paste of existing methods to keep the file complete
extension ChatBlocHandlers on ChatBloc {
  void _onConnect(ConnectWebSocket event, Emitter<ChatState> emit) async {
    try { await _wsService.connect(); _subscription?.cancel(); _subscription = 
_wsService.messages?.listen((msg) => add(_MessageReceived(msg))); 
emit(state.copyWith(status: ChatStatus.connected)); } catch (e) { 
emit(state.copyWith(status: ChatStatus.failure, error: e.toString())); }
  }
  void _onSendMessage(SendMessage event, Emitter<ChatState> emit) { 
_wsService.send({'event': 'message', 'data': {'conversation_id': 
event.conversationId, 'content': event.content}}); }
  void _onSendTyping(SendTypingIndicator event, Emitter<ChatState> emit) { 
_wsService.send({'event': 'typing', 'data': {'conversation_id': 
event.conversationId, 'is_typing': event.isTyping}}); }
  void _onMessageReceived(_MessageReceived event, Emitter<ChatState> emit) {
    if (e.message is! Map<String, dynamic>) return;
    final type = e.message['event'] as String?;
    final data = e.message['data'] as Map<String, dynamic>?;
    if (type == null || data == null) return;
    switch (type) {
      case 'new_message': emit(state.copyWith(messages: 
List.from(state.messages)..add(ChatMessage.fromJson(data)), isPeerTyping: false)); 
break;
      case 'user_typing': emit(state.copyWith(isPeerTyping: data['is_typing'] as 
bool? ?? false)); break;
    }
  }
}
EOF

# -- lib/presentation/bloc/chat_bloc/chat_state.dart (Modified) --
cat > lib/presentation/bloc/chat_bloc/chat_state.dart << 'EOF'
import 'package:equatable/equatable.dart';
import 'package:whatsapp_flutter_client/data/models/chat_message.dart';

// --- ADD NEW STATUS FOR LOADING HISTORY ---
enum ChatStatus { initial, loadingHistory, success, failure, connected, 
disconnected }

class ChatState extends Equatable {
  final ChatStatus status;
  final List<ChatMessage> messages;
  final bool isPeerTyping;
  final String? error;
  const ChatState({this.status = ChatStatus.initial, this.messages = const [], 
this.isPeerTyping = false, this.error});
  ChatState copyWith({ChatStatus? status, List<ChatMessage>? messages, bool? 
isPeerTyping, String? error}) => ChatState(
      status: status ?? this.status, messages: messages ?? this.messages, 
isPeerTyping: isPeerTyping ?? this.isPeerTyping, error: error ?? this.error);
  @override List<Object?> get props => [status, messages, isPeerTyping, error];
}
EOF

# -- lib/core/services/service_locator.dart (Modified) --
cat > lib/core/services/service_locator.dart << 'EOF'
import 'package:get_it/get_it.dart';
import 'package:whatsapp_flutter_client/data/datasources/auth_api_client.dart';
import 'package:whatsapp_flutter_client/data/datasources/websocket_service.dart';
import 'package:whatsapp_flutter_client/data/repositories/auth_repository.dart';
import 
'package:whatsapp_flutter_client/data/repositories/conversation_repository.dart';
import 
'package:whatsapp_flutter_client/presentation/bloc/auth_bloc/auth_bloc.dart';
import 
'package:whatsapp_flutter_client/presentation/bloc/chat_bloc/chat_bloc.dart';
import 
'package:whatsapp_flutter_client/presentation/bloc/conversation_bloc/conversation_bloc.dart';

final getIt = GetIt.instance;

void setupLocator() {
  getIt.registerLazySingleton<AuthApiClient>(() => AuthApiClient());
  getIt.registerLazySingleton<WebSocketService>(() => WebSocketService());

  getIt.registerLazySingleton<AuthRepository>(() => AuthRepository(apiClient: 
getIt<AuthApiClient>()));
  getIt.registerLazySingleton<ConversationRepository>(() => 
ConversationRepository());
  
  getIt.registerFactory<AuthBloc>(() => AuthBloc(authRepository: 
getIt<AuthRepository>()));
  // --- CHATBLOC NOW NEEDS THE CONVERSATION REPO ---
  getIt.registerLazySingleton<ChatBloc>(() => ChatBloc(webSocketService: 
getIt<WebSocketService>(), conversationRepository: 
getIt<ConversationRepository>()));
  getIt.registerFactory<ConversationBloc>(() => 
ConversationBloc(conversationRepository: getIt<ConversationRepository>()));
}
EOF

# -- lib/presentation/screens/chat_screen.dart (Modified) --
cat > lib/presentation/screens/chat_screen.dart << 'EOF'
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:whatsapp_flutter_client/data/models/conversation.dart';
import 
'package:whatsapp_flutter_client/presentation/bloc/chat_bloc/chat_bloc.dart';
import 
'package:whatsapp_flutter_client/presentation/bloc/chat_bloc/chat_event.dart';
import 
'package:whatsapp_flutter_client/presentation/bloc/chat_bloc/chat_state.dart';
import 
'package:whatsapp_flutter_client/presentation/widgets/chat_message_bubble.dart';

class ChatScreen extends StatefulWidget { final Conversation conversation; const 
ChatScreen({super.key, required this.conversation}); @override State<ChatScreen> 
createState() => _ChatScreenState(); }

class _ChatScreenState extends State<ChatScreen> {
  final _controller = TextEditingController(); String? _currentUserId; Timer? 
_typingTimer;
  
  @override
  void initState() {
    super.initState();
    _loadCurrentUser();
    // --- FETCH HISTORY WHEN THE SCREEN LOADS ---
    
context.read<ChatBloc>().add(FetchMessageHistory(widget.conversation.conversationId));
    _controller.addListener(_onTyping);
  }

  Future<void> _loadCurrentUser() async { _currentUserId = await const 
FlutterSecureStorage().read(key: 'user_id'); if (mounted) setState(() {}); }
  
  void _onTyping() {
    _typingTimer?.cancel();
    context.read<ChatBloc>().add(SendTypingIndicator(isTyping: true, 
conversationId: widget.conversation.conversationId));
    _typingTimer = Timer(const Duration(seconds: 2), () => 
context.read<ChatBloc>().add(SendTypingIndicator(isTyping: false, conversationId: 
widget.conversation.conversationId)));
  }

  void _sendMessage() {
    if (_controller.text.isNotEmpty) {
      _typingTimer?.cancel();
      context.read<ChatBloc>().add(SendTypingIndicator(isTyping: false, 
conversationId: widget.conversation.conversationId));
      context.read<ChatBloc>().add(SendMessage(content: _controller.text, 
conversationId: widget.conversation.conversationId));
      _controller.clear();
    }
  }

  @override
  Widget build(BuildContext context) => Scaffold(
      appBar: AppBar(title: Text(widget.conversation.displayName)),
      body: Column(children: [
        Expanded(child: BlocBuilder<ChatBloc, ChatState>(builder: (context, state) 
{
          if (state.status == ChatStatus.loadingHistory) return const 
Center(child: CircularProgressIndicator());
          if (_currentUserId == null) return const Center(child: 
CircularProgressIndicator());
          
          final messages = state.messages.where((m) => m.conversationId == 
widget.conversation.conversationId).toList();
          if (messages.isEmpty) return const Center(child: Text('No messages 
yet.'));
          
          return ListView.builder(
            padding: const EdgeInsets.all(8), reverse: true, itemCount: 
messages.length,
            itemBuilder: (context, index) {
              final message = messages[messages.length - 1 - index];
              return ChatMessageBubble(message: message, isMe: message.senderId == 
_currentUserId);
            }
          );
        })),
        // ... message input widget ...
      ]),
    );
  
  @override void dispose() { _controller.removeListener(_onTyping); 
_controller.dispose(); _typingTimer?.cancel(); super.dispose(); }
}
EOF

# --- End of Script ---
echo "âœ… Project successfully upgraded to Phase 10!"
echo ""
echo "--- Next Steps ---"
echo "1. Stop both your Rust server and Flutter app if they are running."
echo "2. Navigate to your Rust project and run 'cargo run'."
echo "3. Navigate to your Flutter project and run 'flutter run'."
echo ""
echo "4. IMPORTANT: Manually add a few messages to your database for one of your 
conversations using a SQL tool."
echo "   Example: INSERT INTO messages (conversation_id, sender_id, content) 
VALUES ('your_convo_id', 'your_user_id', 'Hello, history!');"
echo "5. Now, when you open that chat in the Flutter app, you should see the 
historical messages load first, and new messages will be appended in real time."
echo "------------------"
